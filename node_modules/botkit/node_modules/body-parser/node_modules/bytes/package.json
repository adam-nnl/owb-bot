{
  "_args": [
    [
      {
        "raw": "bytes@https://registry.npmjs.org/bytes/-/bytes-2.2.0.tgz",
        "scope": null,
        "escapedName": "bytes",
        "name": "bytes",
        "rawSpec": "https://registry.npmjs.org/bytes/-/bytes-2.2.0.tgz",
        "spec": "https://registry.npmjs.org/bytes/-/bytes-2.2.0.tgz",
        "type": "remote"
      },
      "/usr/local/owb-bot/node_modules/botkit/node_modules/body-parser"
    ]
  ],
  "_from": "bytes@2.2.0",
  "_id": "bytes@2.2.0",
  "_inCache": true,
  "_location": "/botkit/body-parser/bytes",
  "_phantomChildren": {},
  "_requested": {
    "raw": "bytes@https://registry.npmjs.org/bytes/-/bytes-2.2.0.tgz",
    "scope": null,
    "escapedName": "bytes",
    "name": "bytes",
    "rawSpec": "https://registry.npmjs.org/bytes/-/bytes-2.2.0.tgz",
    "spec": "https://registry.npmjs.org/bytes/-/bytes-2.2.0.tgz",
    "type": "remote"
  },
  "_requiredBy": [
    "/botkit/body-parser",
    "/botkit/body-parser/raw-body"
  ],
  "_resolved": "https://registry.npmjs.org/bytes/-/bytes-2.2.0.tgz",
  "_shasum": "fd35464a403f6f9117c2de3609ecff9cae000588",
  "_shrinkwrap": null,
  "_spec": "bytes@https://registry.npmjs.org/bytes/-/bytes-2.2.0.tgz",
  "_where": "/usr/local/owb-bot/node_modules/botkit/node_modules/body-parser",
  "author": {
    "name": "TJ Holowaychuk",
    "email": "tj@vision-media.ca",
    "url": "http://tjholowaychuk.com"
  },
  "bugs": {
    "url": "https://github.com/visionmedia/bytes.js/issues"
  },
  "component": {
    "scripts": {
      "bytes/index.js": "index.js"
    }
  },
  "contributors": [
    {
      "name": "Jed Watson",
      "email": "jed.watson@me.com"
    },
    {
      "name": "Th√©o FIDRY",
      "email": "theo.fidry@gmail.com"
    }
  ],
  "dependencies": {},
  "description": "Utility to parse a string bytes to bytes and vice-versa",
  "devDependencies": {
    "mocha": "1.21.5"
  },
  "files": [
    "History.md",
    "LICENSE",
    "Readme.md",
    "index.js"
  ],
  "homepage": "https://github.com/visionmedia/bytes.js#readme",
  "keywords": [
    "byte",
    "bytes",
    "utility",
    "parse",
    "parser",
    "convert",
    "converter"
  ],
  "license": "MIT",
  "name": "bytes",
  "optionalDependencies": {},
  "readme": "# Bytes utility\n\n[![NPM Version][npm-image]][npm-url]\n[![NPM Downloads][downloads-image]][downloads-url]\n[![Build Status][travis-image]][travis-url]\n\nUtility to parse a string bytes (ex: `1TB`) to bytes (`1099511627776`) and vice-versa.\n\n## Usage\n\n```js\nvar bytes = require('bytes');\n```\n\n#### bytes.format(number value, [options]): string|null\n\nFormat the given value in bytes into a string. If the value is negative, it is kept as such. If it is a float, it is\n rounded.\n\n**Arguments**\n\n| Name    | Type   | Description        |\n|---------|--------|--------------------|\n| value   | `number` | Value in bytes     |\n| options | `Object` | Conversion options |\n\n**Options**\n\n| Property          | Type   | Description                                                                             |\n|-------------------|--------|-----------------------------------------------------------------------------------------|\n| decimalPlaces | `number`&#124;`null` | Maximum number of decimal places to include in output. Default value to `2`. |\n| fixedDecimals | `boolean`&#124;`null` | Whether to always display the maximum number of decimal places. Default value to `false` |\n| thousandsSeparator | `string`&#124;`null` | Example of values: `' '`, `','` and `.`... Default value to `' '`. |\n\n**Returns**\n\n| Name    | Type        | Description             |\n|---------|-------------|-------------------------|\n| results | `string`&#124;`null` | Return null upon error. String value otherwise. |\n\n**Example**\n\n```js\nbytes(1024);\n// output: '1kB'\n\nbytes(1000);\n// output: '1000B'\n\nbytes(1000, {thousandsSeparator: ' '});\n// output: '1 000B'\n\nbytes(1024 * 1.7, {decimalPlaces: 0});\n// output: '2kB'\n```\n\n#### bytes.parse(string value): number|null\n\nParse the string value into an integer in bytes. If no unit is given, it is assumed the value is in bytes.\n\n**Arguments**\n\n| Name          | Type   | Description        |\n|---------------|--------|--------------------|\n| value   | `string` | String to parse.   |\n\n**Returns**\n\n| Name    | Type        | Description             |\n|---------|-------------|-------------------------|\n| results | `number`&#124;`null` | Return null upon error. Value in bytes otherwise. |\n\n**Example**\n\n```js\nbytes('1kB');\n// output: 1024\n\nbytes('1024');\n// output: 1024\n```\n\n## Installation\n\n```bash\nnpm install bytes --save\ncomponent install visionmedia/bytes.js\n```\n\n## License \n\n[![npm](https://img.shields.io/npm/l/express.svg)](https://github.com/visionmedia/bytes.js/blob/master/LICENSE)\n\n[downloads-image]: https://img.shields.io/npm/dm/bytes.svg\n[downloads-url]: https://npmjs.org/package/bytes\n[npm-image]: https://img.shields.io/npm/v/bytes.svg\n[npm-url]: https://npmjs.org/package/bytes\n[travis-image]: https://img.shields.io/travis/visionmedia/bytes.js/master.svg\n[travis-url]: https://travis-ci.org/visionmedia/bytes.js\n",
  "readmeFilename": "Readme.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/visionmedia/bytes.js.git"
  },
  "scripts": {
    "test": "mocha --check-leaks --reporter spec"
  },
  "version": "2.2.0"
}
